{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // This function processes adding a new list\n\n  store.createNewList = function () {\n    async function asyncCreatePlaylist() {\n      console.log(\"In asyn create new list function\");\n      let response = await api.createNewList();\n      if (response.data.success) {\n        let playlistId = response.data.playlist._id; // param for setting here\n        async function asyncSetCurrentList(id) {\n          // line 200\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.history.push(\"/playlist/\" + playlist._id); // add to store\n            }\n          }\n        }\n\n        asyncSetCurrentList(playlistId);\n      } else {\n        console.log(\"API FAILED TO CREATE A NEW LIST\");\n      }\n    }\n    asyncCreatePlaylist();\n  };\n\n  // delete list stuff\n\n  store.deleteList = function (id) {\n    console.log(\"reached delete list function. Id: \" + id);\n    async function asyncMarkDeleteList(id) {\n      let reponse = await api.getPlaylistById(id);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {}\n        });\n      }\n      async function asyncDeleteList(id) {\n        let reponse = await api.deleteListById(id);\n        if (response.data.success) {\n          async function processList() {\n            store.history.push('/');\n            store.loadIdNamePairs();\n          }\n          processList();\n        }\n      }\n      asyncDeleteList(id);\n    }\n    asyncMarkDeleteList(id);\n  };\n\n  // store.markListForDeletion = function (id) {\n  //     storeReducer({\n  //         type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n  //         payload: id\n  //     });\n  //     store.showDeleteListModal();\n  // }\n  // store.deleteList = function (id) {\n  //     console.log(\"deleteList function reached\");\n  //     async function asyncProcessDelete(id) {\n  //         console.log(\"async processDelete function reached\");\n  //         let response = await api.deleteListById(id);\n  //         if (response.data.success) {\n  //             store.loadIdNamePairs();\n  //             store.history.push(\"/\");\n  //         }\n  //     }\n  //     asyncProcessDelete(id);\n  // }\n  // store.deleteMarkedList = function() {\n  //     store.deleteList(store.listMarkedForDeletion);\n  //     store.hideDeleteListModal();\n  // }\n  // store.showDeleteListModal = function() {\n  //     let modal = document.getElementById(\"delete-modal\");\n  //     modal.classList.add(\"is-visible\");\n  // }\n  // store.hideDeleteListModal = function() {\n  //     let modal = document.getElementById(\"delete-modal\");\n  //     modal.classList.remove(\"is-visible\");\n  // }\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"5esZRSaCUwjeueF8RbldueI12xo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","createNewList","asyncCreatePlaylist","console","log","response","data","success","playlistId","_id","asyncSetCurrentList","id","getPlaylistById","history","push","deleteList","asyncMarkDeleteList","reponse","asyncDeleteList","deleteListById","processList","loadIdNamePairs","changeListName","newName","asyncChangeListName","playist","name","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/naseebafaiza/Desktop/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // This function processes adding a new list\n\n    store.createNewList = function(){\n        async function asyncCreatePlaylist(){\n            console.log(\"In asyn create new list function\");\n            let response = await api.createNewList();\n            if (response.data.success){\n                let playlistId = response.data.playlist._id; // param for setting here\n                async function asyncSetCurrentList(id){ // line 200\n                    let response = await api.getPlaylistById(id);\n                    if(response.data.success){\n                        let playlist = response.data.playlist;\n                        if (response.data.success) {\n                            storeReducer({\n                                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                                payload: playlist\n                            });\n                            store.history.push(\"/playlist/\" + playlist._id); // add to store\n                        } \n                    } \n                } asyncSetCurrentList(playlistId);\n            }\n            else {\n                console.log(\"API FAILED TO CREATE A NEW LIST\");\n            }\n        } asyncCreatePlaylist();\n    }\n\n    // delete list stuff\n\n    store.deleteList = function (id) {\n        console.log(\"reached delete list function. Id: \" + id);\n        async function asyncMarkDeleteList(id){\n            let reponse = await api.getPlaylistById(id);\n            if(response.data.success){\n                storeReducer({\n                    type:GlobalStoreActionType.MARK_LIST_FOR_DELETION, payload: {}\n                });\n            } async function asyncDeleteList(id){\n                let reponse = await api.deleteListById(id);\n                if(response.data.success){\n                    async function processList(){\n                        store.history.push('/');\n                        store.loadIdNamePairs();\n                    } processList();\n                }\n            } asyncDeleteList(id);\n        } asyncMarkDeleteList(id);\n    }\n\n    // store.markListForDeletion = function (id) {\n    //     storeReducer({\n    //         type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n    //         payload: id\n    //     });\n    //     store.showDeleteListModal();\n    // }\n    // store.deleteList = function (id) {\n    //     console.log(\"deleteList function reached\");\n    //     async function asyncProcessDelete(id) {\n    //         console.log(\"async processDelete function reached\");\n    //         let response = await api.deleteListById(id);\n    //         if (response.data.success) {\n    //             store.loadIdNamePairs();\n    //             store.history.push(\"/\");\n    //         }\n    //     }\n    //     asyncProcessDelete(id);\n    // }\n    // store.deleteMarkedList = function() {\n    //     store.deleteList(store.listMarkedForDeletion);\n    //     store.hideDeleteListModal();\n    // }\n    // store.showDeleteListModal = function() {\n    //     let modal = document.getElementById(\"delete-modal\");\n    //     modal.classList.add(\"is-visible\");\n    // }\n    // store.hideDeleteListModal = function() {\n    //     let modal = document.getElementById(\"delete-modal\");\n    //     modal.classList.remove(\"is-visible\");\n    // }\n\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}