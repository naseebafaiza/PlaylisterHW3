{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState, startTransition } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport RemoveSongTransaction from '../transactions/RemoveSongTransaction';\nimport AddSongTransaction from '../transactions/AddSongTransaction';\nimport MoveSongTransaction from '../transactions/MoveSongTransaction';\nimport EditSongTransaction from '../transactions/EditSongTransaction';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG: \"MARK_SONG\",\n  DELETE_LIST: \"DELETE_LIST\",\n  EDIT_LIST_CARD: \"EDIT_LIST_CARD\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markForDeletion: null,\n    markedSong: -1,\n    modalOpen: false\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion,\n            modalOpen: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion,\n            markedSong: -1,\n            modalOpen: false\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion,\n            markedSong: -1,\n            modalOpen: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion,\n            markedSong: -1,\n            modalOpen: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: payload,\n            markedSong: -1,\n            modalOpen: true\n          });\n        }\n      // Delete a list\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false,\n            markForDeletion: null,\n            markedSong: -1,\n            modalOpen: false\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion,\n            markedSong: -1,\n            modalOpen: false\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markForDeletion: null,\n            markedSong: -1,\n            modalOpen: false\n          });\n        }\n      case GlobalStoreActionType.EDIT_LIST_CARD:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: null,\n            markedSong: -1,\n            modalOpen: false\n          });\n        }\n      case GlobalStoreActionType.MARK_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: null,\n            markedSong: payload,\n            modalOpen: true\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // This function processes adding a new list\n\n  store.createNewList = function () {\n    async function asyncCreatePlaylist() {\n      console.log(\"In asyn create new list function\");\n      let response = await api.createNewList();\n      if (response.data.success) {\n        let playlistId = response.data.playlist._id; // param for setting here\n        async function asyncSetCurrentList(id) {\n          // line 200\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.history.push(\"/playlist/\" + playlist._id); // add to store\n            }\n          }\n        }\n\n        asyncSetCurrentList(playlistId);\n      } else {\n        console.log(\"API FAILED TO CREATE A NEW LIST\");\n      }\n    }\n    asyncCreatePlaylist();\n  };\n\n  // edit song stuff\n  store.editSong = function (index, title, artist, youTubeId) {\n    if (store.currentList != null) {\n      async function asyncEditSong(index, title, artist, youTubeId) {\n        let response = await api.getPlaylistById(store.currentList._id);\n        if (response.data.success) {\n          let playlist = response.data.playlist;\n          playlist.songs[index].title = title;\n          playlist.songs[index].artist = artist;\n          playlist.songs[index].youTubeId = youTubeId;\n          async function updateList(playlist) {\n            response = await api.editPlaylist(playlist._id, playlist);\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.EDIT_LIST_ITEM,\n                payload: playlist\n              });\n            }\n          }\n          updateList(playlist);\n        }\n      }\n      asyncEditSong(index, title, artist, youTubeId);\n      store.history.push(\"/playlist/\" + store.currentList._id);\n    }\n  };\n  store.markSongForEdit = function (index) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: index\n    });\n    store.showEditSongModal(index);\n  };\n\n  // add song stuff\n  store.addSong = function () {\n    console.log(\"ADD SONG FUNCTZION REACHED\");\n    let currentList = store.currentList;\n    console.log(\"CURRENT LISTY LOOKS LIKE : \" + currentList);\n    console.log(\"SIZE OF LIST: \" + store.currentList.songs.length);\n    let newSong = {\n      title: \"Untitled\",\n      artist: \"Unknown\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    currentList.songs.push(newSong); // new song added to curr list\n    async function reloadList(currentList) {\n      let response = await api.editPlaylist(currentList._id, currentList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: currentList\n        });\n      }\n    }\n    reloadList(currentList);\n  };\n\n  // moving song\n  store.moveSong = function (sourceId, targetId) {\n    let currlist = store.currentList;\n    if (sourceId < targetId) {\n      let tempList = currlist.songs[sourceId];\n      for (let i = sourceId; i < targetId; i++) {\n        currlist.songs[i] = currlist.songs[i + 1];\n      }\n      currlist.songs[targetId] = tempList;\n    } else if (sourceId > targetId) {\n      let tempList = currlist.songs[sourceId];\n      for (let i = sourceId; i > targetId; i--) {\n        currlist.songs[i] = currlist.songs[i - 1];\n      }\n      currlist.songs[targetId] = tempList;\n    }\n    async function reloadList(currlist) {\n      console.log(\"CURRENT LISTA LOOKIN LIKE: \" + currlist);\n      let response = await api.editPlaylist(currlist._id, currlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.EDIT_LIST_CARD,\n          payload: currlist\n        });\n      }\n    }\n    reloadList(currlist);\n  };\n\n  // delete song & transaction\n  store.addSongAt = function (index, song) {\n    console.log(\"ADD SONG AT FUNCTION REACHED\");\n    if (store.currentList != null) {\n      async function asyncAddSongAt(index, song) {\n        let response = await api.getPlaylistById(store.currentList._id);\n        if (response.data.success) {\n          let playlist = response.data.playlist;\n          playlist.songs.splice(index, 0, song);\n          async function updateList(playlist) {\n            response = await api.editPlaylist(playlist._id, playlist);\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.EDIT_LIST_ITEM,\n                payload: playlist\n              });\n            }\n          }\n          updateList(playlist);\n        }\n      }\n      asyncAddSongAt(index, song);\n      store.history.push(\"/playlist/\" + store.currentList._id);\n    }\n  };\n  store.removeSongAt = function (index) {\n    if (store.currentList != null) {\n      async function asyncRemoveSongAt(index) {\n        let response = await api.getPlaylistById(store.currentList._id);\n        if (response.data.success) {\n          let playlist = response.data.playlist;\n          playlist.songs.splice(index, 1);\n          async function updateList(playlist) {\n            response = await api.editPlaylist(playlist._id, playlist);\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.EDIT_LIST_ITEM,\n                payload: playlist\n              });\n            }\n          }\n          updateList(playlist);\n        }\n      }\n      asyncRemoveSongAt(index);\n      store.history.push(\"/playlist/\" + store.currentList._id);\n    }\n  };\n  store.markSong = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: id\n    });\n    store.showDeleteSongModal();\n  };\n  store.showDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  // delete list stuff\n\n  store.deleteList = function (id) {\n    console.log(id);\n    async function asyncDeleteList(id) {\n      let response = await api.deleteListById(id);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_LIST,\n          payload: {}\n        });\n        store.loadIdNamePairs();\n        store.history.push(\"/\");\n      }\n    }\n    asyncDeleteList(id);\n    store.history.push(\"/\");\n  };\n  store.markListForDeletion = function (id) {\n    console.log(\"MARKLISTFORDELETION FUNCTION here's id : \" + id.name);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.showDeleteListModal();\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.markForDeletion._id);\n    store.hideDeleteListModal();\n  };\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.showEditSongModal = function (index) {\n    let modal = document.getElementById(\"edit-song-modal\");\n    document.getElementById(\"edit-song-modal-title\").value = store.currentList.songs[index].title;\n    document.getElementById(\"edit-song-modal-artist\").value = store.currentList.songs[index].artist;\n    document.getElementById(\"edit-song-modal-youTubeId\").value = store.currentList.songs[index].youTubeId;\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.editPlaylist(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n                store.history.push(\"/\");\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.addAddSongTransaction = function () {\n    console.log(\"ADD song trans\");\n    let transaction = new AddSongTransaction(store);\n    tps.addTransaction(transaction);\n  };\n  store.addMoveSongTransaction = function (to, from) {\n    let transaction = new MoveSongTransaction(store, to, from);\n    tps.addTransaction(transaction);\n  };\n  store.addRemoveSongTransaction = function () {\n    let transaction = new RemoveSongTransaction(store);\n    store.hideDeleteSongModal();\n    tps.addTransaction(transaction);\n  };\n  store.addEditSongTransaction = function () {\n    let transaction = new EditSongTransaction(store);\n    store.hideEditSongModal();\n    tps.addTransaction(transaction);\n  };\n  store.undoable = function () {\n    return tps.hasTransactionToUndo();\n  };\n  store.redoable = function () {\n    return tps.hasTransactionToRedo();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"qFVWy1wJaf+UK1f7XhFdTzisvY0=\");","map":{"version":3,"names":["createContext","useState","startTransition","jsTPS","RemoveSongTransaction","AddSongTransaction","MoveSongTransaction","EditSongTransaction","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","MARK_SONG","DELETE_LIST","EDIT_LIST_CARD","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markForDeletion","markedSong","modalOpen","storeReducer","action","type","payload","createNewList","asyncCreatePlaylist","console","log","response","data","success","playlistId","playlist","_id","asyncSetCurrentList","id","getPlaylistById","history","push","editSong","index","title","artist","youTubeId","asyncEditSong","songs","updateList","editPlaylist","EDIT_LIST_ITEM","markSongForEdit","showEditSongModal","addSong","length","newSong","reloadList","moveSong","sourceId","targetId","currlist","tempList","i","addSongAt","song","asyncAddSongAt","splice","removeSongAt","asyncRemoveSongAt","markSong","showDeleteSongModal","modal","document","getElementById","classList","add","hideDeleteSongModal","remove","deleteList","asyncDeleteList","deleteListById","loadIdNamePairs","markListForDeletion","name","showDeleteListModal","deleteMarkedList","hideDeleteListModal","value","hideEditSongModal","changeListName","newName","asyncChangeListName","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","getPlaylistSize","undo","undoTransaction","redo","doTransaction","addAddSongTransaction","transaction","addTransaction","addMoveSongTransaction","to","from","addRemoveSongTransaction","addEditSongTransaction","undoable","hasTransactionToUndo","redoable","hasTransactionToRedo","setlistNameActive"],"sources":["/Users/naseebafaiza/Desktop/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState, startTransition } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport RemoveSongTransaction from '../transactions/RemoveSongTransaction';\nimport AddSongTransaction from '../transactions/AddSongTransaction';\nimport MoveSongTransaction from '../transactions/MoveSongTransaction';\nimport EditSongTransaction from '../transactions/EditSongTransaction';\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    MARK_SONG: \"MARK_SONG\",\n    DELETE_LIST: \"DELETE_LIST\",\n    EDIT_LIST_CARD: \"EDIT_LIST_CARD\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markForDeletion: null,\n        markedSong: -1,\n        modalOpen: false,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                    modalOpen: false,\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                    markedSong: -1,\n                    modalOpen: false,\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                    markedSong: -1,\n                    modalOpen: false,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                    markedSong: -1,\n                    modalOpen: false,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: payload,\n                    markedSong: -1,\n                    modalOpen: true,\n                });\n            }\n            // Delete a list\n            case GlobalStoreActionType.DELETE_LIST:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter - 1,\n                    listNameActive: false,\n                    markForDeletion: null,\n                    markedSong: -1,\n                    modalOpen: false,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                    markedSong : -1,\n                    modalOpen: false,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markForDeletion: null,\n                    markedSong : -1,\n                    modalOpen: false,\n                });\n            }\n\n            case GlobalStoreActionType.EDIT_LIST_CARD:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: null,\n                    markedSong: -1,\n                    modalOpen: false,\n                });\n            }\n            case GlobalStoreActionType.MARK_SONG: {\n                return setStore ({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: null,\n                    markedSong : payload,\n                    modalOpen: true,\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // This function processes adding a new list\n\n    store.createNewList = function(){\n        async function asyncCreatePlaylist(){\n            console.log(\"In asyn create new list function\");\n            let response = await api.createNewList();\n            if (response.data.success){\n                let playlistId = response.data.playlist._id; // param for setting here\n                async function asyncSetCurrentList(id){ // line 200\n                    let response = await api.getPlaylistById(id);\n                    if(response.data.success){\n                        let playlist = response.data.playlist;\n                        if (response.data.success) {\n                            storeReducer({\n                                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                                payload: playlist\n                            });\n                            store.history.push(\"/playlist/\" + playlist._id); // add to store\n                        } \n                    } \n                } asyncSetCurrentList(playlistId);\n            }\n            else {\n                console.log(\"API FAILED TO CREATE A NEW LIST\");\n            }\n        } asyncCreatePlaylist();\n    }\n\n    // edit song stuff\n    store.editSong = function (index, title, artist, youTubeId) {\n        if (store.currentList != null) {\n            async function asyncEditSong(index, title, artist, youTubeId) {\n                let response = await api.getPlaylistById(store.currentList._id);\n                if (response.data.success) {\n                    let playlist = response.data.playlist;\n                    playlist.songs[index].title = title;\n                    playlist.songs[index].artist = artist;\n                    playlist.songs[index].youTubeId = youTubeId;\n                    async function updateList(playlist) {\n                        response = await api.editPlaylist(playlist._id, playlist);\n                        if (response.data.success) {\n                            storeReducer({\n                                type: GlobalStoreActionType.EDIT_LIST_ITEM,\n                                payload: playlist\n                            });\n                        }\n                    }\n                    updateList(playlist);\n                }\n            }\n            asyncEditSong(index, title, artist, youTubeId);\n            store.history.push(\"/playlist/\" + store.currentList._id);\n        }\n    }\n\n    store.markSongForEdit = function(index) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: index\n        })\n        store.showEditSongModal(index);\n    }\n\n    // add song stuff\n    store.addSong = function(){\n        console.log(\"ADD SONG FUNCTZION REACHED\");\n        let currentList = store.currentList;\n        console.log(\"CURRENT LISTY LOOKS LIKE : \" + currentList);\n        console.log(\"SIZE OF LIST: \" + store.currentList.songs.length);\n        let newSong = {title:\"Untitled\", artist:\"Unknown\", youTubeId:\"dQw4w9WgXcQ\"};\n        currentList.songs.push(newSong); // new song added to curr list\n        async function reloadList(currentList){\n            let response = await api.editPlaylist(currentList._id, currentList);\n            if(response.data.success){\n                storeReducer({type: GlobalStoreActionType.SET_CURRENT_LIST, \n                    payload: currentList,\n                })\n            }\n\n        } reloadList(currentList);\n    }\n\n    // moving song\n    store.moveSong = function(sourceId,targetId){\n        let currlist = store.currentList;\n        if(sourceId < targetId){\n            let tempList = currlist.songs[sourceId];\n            for (let i = sourceId; i < targetId; i++) {\n                currlist.songs[i] = currlist.songs[i + 1];\n            }\n            currlist.songs[targetId] = tempList;\n        }\n        else if (sourceId>targetId){\n            let tempList = currlist.songs[sourceId];\n            for (let i = sourceId; i > targetId; i--) {\n                currlist.songs[i] = currlist.songs[i - 1];\n            }\n            currlist.songs[targetId] = tempList;\n        }\n        async function reloadList(currlist){\n            console.log(\"CURRENT LISTA LOOKIN LIKE: \" + currlist);\n            let response=await api.editPlaylist(currlist._id,currlist);\n            if(response.data.success){\n                storeReducer({\n                    type:GlobalStoreActionType.EDIT_LIST_CARD,\n                    payload:currlist,\n                })\n            }\n        }reloadList(currlist);\n    }\n\n    // delete song & transaction\n    store.addSongAt = function (index, song) {\n        console.log(\"ADD SONG AT FUNCTION REACHED\");\n        if (store.currentList != null) {\n            async function asyncAddSongAt(index, song) {\n                let response = await api.getPlaylistById(store.currentList._id);\n                if (response.data.success) {\n                    let playlist = response.data.playlist;\n                    playlist.songs.splice(index, 0, song);\n                    async function updateList(playlist) {\n                        response = await api.editPlaylist(playlist._id, playlist);\n                        if (response.data.success) {\n                            storeReducer({\n                                type: GlobalStoreActionType.EDIT_LIST_ITEM,\n                                payload: playlist\n                            });\n                        }\n                    }\n                    updateList(playlist);\n                }\n            }\n            asyncAddSongAt(index, song);\n            store.history.push(\"/playlist/\" + store.currentList._id);\n        }\n    }\n\n    store.removeSongAt  = function (index) {\n        \n        if (store.currentList != null) {\n            async function asyncRemoveSongAt(index) {\n                let response = await api.getPlaylistById(store.currentList._id);\n                if (response.data.success) {\n                    let playlist = response.data.playlist;\n                    playlist.songs.splice(index, 1)\n                    async function updateList(playlist) {\n                        response = await api.editPlaylist(playlist._id, playlist);\n                        if (response.data.success) {\n                            storeReducer({\n                                type: GlobalStoreActionType.EDIT_LIST_ITEM,\n                                payload: playlist\n                            });\n                        }\n                    }\n                    updateList(playlist);\n                }\n            }\n            asyncRemoveSongAt(index);\n            \n            store.history.push(\"/playlist/\" + store.currentList._id);\n        }\n    }\n\n    store.markSong = function(id) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: id\n        })\n        store.showDeleteSongModal();\n    }\n    store.showDeleteSongModal = function() {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.hideDeleteSongModal = function() {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    // delete list stuff\n\n    store.deleteList = function (id) {\n        console.log(id);\n        async function asyncDeleteList(id) {\n            let response = await api.deleteListById(id);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.DELETE_LIST,\n                    payload: {}\n                });\n                store.loadIdNamePairs();\n                store.history.push(\"/\");\n            }\n        }\n        asyncDeleteList(id);\n        store.history.push(\"/\");\n    }\n\n    store.markListForDeletion = function (id) {\n        console.log(\"MARKLISTFORDELETION FUNCTION here's id : \" + id.name)\n                    storeReducer({\n                        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n                    });\n                    store.showDeleteListModal();\n    }\n\n    store.deleteMarkedList = function() {\n        store.deleteList(store.markForDeletion._id);\n        store.hideDeleteListModal();\n    }\n\n    store.showDeleteListModal = function() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.hideDeleteListModal = function() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showEditSongModal = function(index) {\n        let modal = document.getElementById(\"edit-song-modal\");\n        document.getElementById(\"edit-song-modal-title\").value = store.currentList.songs[index].title;\n        document.getElementById(\"edit-song-modal-artist\").value = store.currentList.songs[index].artist;\n        document.getElementById(\"edit-song-modal-youTubeId\").value = store.currentList.songs[index].youTubeId;\n        modal.classList.add(\"is-visible\");\n\n    }\n    store.hideEditSongModal = function() {\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.editPlaylist(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                                store.history.push(\"/\");\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n    store.addAddSongTransaction = function() {\n        console.log(\"ADD song trans\");\n        let transaction = new AddSongTransaction(store);\n        tps.addTransaction(transaction);\n    }\n    store.addMoveSongTransaction = function(to, from) {\n        let transaction = new MoveSongTransaction(store, to, from);\n        tps.addTransaction(transaction);\n    }\n    store.addRemoveSongTransaction = function() {\n        let transaction = new RemoveSongTransaction(store);\n        store.hideDeleteSongModal();\n        tps.addTransaction(transaction);\n    }\n    store.addEditSongTransaction = function() {\n        let transaction = new EditSongTransaction(store);\n        store.hideEditSongModal();\n        tps.addTransaction(transaction);\n    }\n\n    store.undoable = function() {\n        return tps.hasTransactionToUndo();\n    }\n    store.redoable = function() {\n        return tps.hasTransactionToRedo();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}