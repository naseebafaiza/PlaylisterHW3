{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState, startTransition } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markForDeletion: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: payload\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markForDeletion: store.markForDeletion\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markForDeletion: store.markForDeletion\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // This function processes adding a new list\n\n  store.createNewList = function () {\n    async function asyncCreatePlaylist() {\n      console.log(\"In asyn create new list function\");\n      let response = await api.createNewList();\n      if (response.data.success) {\n        let playlistId = response.data.playlist._id; // param for setting here\n        async function asyncSetCurrentList(id) {\n          // line 200\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.history.push(\"/playlist/\" + playlist._id); // add to store\n            }\n          }\n        }\n\n        asyncSetCurrentList(playlistId);\n      } else {\n        console.log(\"API FAILED TO CREATE A NEW LIST\");\n      }\n    }\n    asyncCreatePlaylist();\n  };\n\n  // add song stuff\n  store.addSong = function () {\n    console.log(\"ADD SONG FUNCTZION REACHED\");\n    let currentList = store.currentList;\n    console.log(\"CURRENT LISTY LOOKS LIKE : \" + currentList);\n    console.log(\"SIZE OF LIST: \" + store.currentList.songs.length);\n    let newSong = {\n      title: \"Untitled\",\n      artist: \"Unknown\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    currentList.songs.push(newSong); // new song added to curr list\n    async function reloadList(currentList) {\n      let response = await api.editPlaylist(currentList._id, currentList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: currentList\n        });\n      }\n    }\n    reloadList(currentList);\n  };\n\n  // moving song\n  store.moveSong = function (sourceId, targetId) {\n    let currlist = store.currentList;\n    if (sourceId < targetId) {\n      let tempList = currlist.songs[sourceId];\n      for (let i = sourceId; i < targetId; i++) {\n        currlist.songs[i] = currlist.songs[i + 1];\n      }\n      currlist.songs[targetId] = tempList;\n    } else if (sourceId > targetId) {\n      let tempList = currlist.songs[sourceId];\n      for (let i = sourceId; i > targetId; i--) {\n        currlist.songs[i] = currlist.songs[i - 1];\n      }\n      currlist.songs[targetId] = tempList;\n    }\n    async function reloadList(currlist) {\n      console.log(\"CURRENT LISTA LOOKIN LIKE: \" + currlist);\n      let response = await api.editPlaylist(currlist._id, currlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: currlist\n        });\n      }\n    }\n    reloadList(currlist);\n  };\n\n  // delete list stuff\n\n  store.deleteList = function (id) {\n    console.log(\"reached delete list function. Id: \" + id);\n    let playlist = store.markForDeletion;\n    async function asyncDeleteList(playlist) {\n      let response = await api.deleteListById(playlist._id);\n      if (response.data.success) {\n        async function reloadPlaylist() {\n          store.history.push('/');\n          store.loadIdNamePairs();\n        }\n        reloadPlaylist();\n      }\n    }\n    asyncDeleteList(playlist);\n  };\n  store.markListForDeletion = function (id) {\n    console.log(\"MARKLISTFORDELETION FUNCTION here's id : \" + id.name);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.showDeleteListModal();\n  };\n\n  // store.deleteMarkedList = function() {\n  //     store.deleteList(store.listMarkedForDeletion);\n  //     store.hideDeleteListModal();\n  // }\n\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.editPlaylist(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n                // store.history.push(\"/\");\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"5DUsFSllV7tO4NW4O7inJKgr1OY=\");","map":{"version":3,"names":["createContext","useState","startTransition","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markForDeletion","storeReducer","action","type","payload","playlist","createNewList","asyncCreatePlaylist","console","log","response","data","success","playlistId","_id","asyncSetCurrentList","id","getPlaylistById","history","push","addSong","songs","length","newSong","title","artist","youTubeId","reloadList","editPlaylist","moveSong","sourceId","targetId","currlist","tempList","i","deleteList","asyncDeleteList","deleteListById","reloadPlaylist","loadIdNamePairs","markListForDeletion","name","showDeleteListModal","modal","document","getElementById","classList","add","hideDeleteListModal","remove","changeListName","newName","asyncChangeListName","updateList","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/naseebafaiza/Desktop/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState, startTransition } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markForDeletion: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: payload,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markForDeletion: store.markForDeletion,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markForDeletion: store.markForDeletion,\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // This function processes adding a new list\n\n    store.createNewList = function(){\n        async function asyncCreatePlaylist(){\n            console.log(\"In asyn create new list function\");\n            let response = await api.createNewList();\n            if (response.data.success){\n                let playlistId = response.data.playlist._id; // param for setting here\n                async function asyncSetCurrentList(id){ // line 200\n                    let response = await api.getPlaylistById(id);\n                    if(response.data.success){\n                        let playlist = response.data.playlist;\n                        if (response.data.success) {\n                            storeReducer({\n                                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                                payload: playlist\n                            });\n                            store.history.push(\"/playlist/\" + playlist._id); // add to store\n                        } \n                    } \n                } asyncSetCurrentList(playlistId);\n            }\n            else {\n                console.log(\"API FAILED TO CREATE A NEW LIST\");\n            }\n        } asyncCreatePlaylist();\n    }\n\n    // add song stuff\n    store.addSong = function(){\n        console.log(\"ADD SONG FUNCTZION REACHED\");\n        let currentList = store.currentList;\n        console.log(\"CURRENT LISTY LOOKS LIKE : \" + currentList);\n        console.log(\"SIZE OF LIST: \" + store.currentList.songs.length);\n        let newSong = {title:\"Untitled\", artist:\"Unknown\", youTubeId:\"dQw4w9WgXcQ\"};\n        currentList.songs.push(newSong); // new song added to curr list\n        async function reloadList(currentList){\n            let response = await api.editPlaylist(currentList._id, currentList);\n            if(response.data.success){\n                storeReducer({type: GlobalStoreActionType.SET_CURRENT_LIST, \n                    payload: currentList,\n                })\n            }\n\n        } reloadList(currentList);\n    }\n\n    // moving song\n    store.moveSong = function(sourceId,targetId){\n        let currlist = store.currentList;\n        if(sourceId < targetId){\n            let tempList = currlist.songs[sourceId];\n            for (let i = sourceId; i < targetId; i++) {\n                currlist.songs[i] = currlist.songs[i + 1];\n            }\n            currlist.songs[targetId] = tempList;\n        }\n        else if (sourceId>targetId){\n            let tempList = currlist.songs[sourceId];\n            for (let i = sourceId; i > targetId; i--) {\n                currlist.songs[i] = currlist.songs[i - 1];\n            }\n            currlist.songs[targetId] = tempList;\n        }\n        async function reloadList(currlist){\n            console.log(\"CURRENT LISTA LOOKIN LIKE: \" + currlist);\n            let response=await api.editPlaylist(currlist._id,currlist);\n            if(response.data.success){\n                storeReducer({\n                    type:GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload:currlist,\n                })\n            }\n        }reloadList(currlist);\n    }\n\n    // delete list stuff\n\n    store.deleteList = function (id) {\n        console.log(\"reached delete list function. Id: \" + id);\n        let playlist = store.markForDeletion;\n        async function asyncDeleteList(playlist){\n            let response = await api.deleteListById(playlist._id);\n            if(response.data.success){\n                async function reloadPlaylist(){\n                    store.history.push('/');\n                    store.loadIdNamePairs();\n                } reloadPlaylist();\n            } \n        } asyncDeleteList(playlist);\n    }\n\n    store.markListForDeletion = function (id) {\n        console.log(\"MARKLISTFORDELETION FUNCTION here's id : \" + id.name)\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n        });\n        store.showDeleteListModal();\n    }\n\n    // store.deleteMarkedList = function() {\n    //     store.deleteList(store.listMarkedForDeletion);\n    //     store.hideDeleteListModal();\n    // }\n\n    store.showDeleteListModal = function() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.hideDeleteListModal = function() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.editPlaylist(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                                // store.history.push(\"/\");\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}